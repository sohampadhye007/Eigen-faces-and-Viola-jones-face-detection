# -*- coding: utf-8 -*-
"""M22RM007_Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12HLSyYMct--LiuYveDGgfymwEOkMAcOJ

# Deer Vs Non Deer using SVM (Soham Padhye-M22RM007)
"""

import cv2
import numpy as np
from skimage.feature import hog
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import os
from skimage import transform
from sklearn.svm import LinearSVC
from tqdm import tqdm
from google.colab import drive
from google.colab.patches import cv2_imshow

# mount Google Drive
drive.mount('/content/drive')

"""# Load deer and non deer images from the folder"""

# Load deer and non-deer images
#Create the empty list to store the images
deer_images = []
non_deer_images = []

for file in os.listdir(r'/content/drive/MyDrive/Asssignment-3/data/deer-train/deer images'):
    if file.endswith('.jpg'):
        img=cv2.imread(os.path.join(r'/content/drive/MyDrive/Asssignment-3/data/deer-train/deer images', file), 0)
        img=cv2.resize(img,(250,250))
        deer_images.append(img)
        
for file in os.listdir(r'/content/drive/MyDrive/Asssignment-3/data/deer-train/non deer images'):
    if file.endswith('.jpg'):
        img2=cv2.imread(os.path.join(r'/content/drive/MyDrive/Asssignment-3/data/deer-train/non deer images', file), 0)
        img2=cv2.resize(img2,(250,250))
        non_deer_images.append(img2)

print(f"Numeber of deer images in the dataset {len(deer_images)}")
print(f"Numeber of non deer images in the dataset {len(non_deer_images)}")

# Compute HOG features for deer images
def deer_nondeer(deer_images,non_deer_images):
    deer_features = []
    for img in deer_images:
        fd = hog(img, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False)
        deer_features.append(fd)

    # Compute HOG features for non-deer images
    non_deer_features = []
    for img in non_deer_images:
        fd = hog(img, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False)
        non_deer_features.append(fd)

    # Create labels for the dataset
    deer_labels = np.ones(len(deer_features))
    non_deer_labels = np.zeros(len(non_deer_features))

    # Concatenate the features and labels
    features = np.concatenate((deer_features, non_deer_features))
    labels = np.concatenate((deer_labels, non_deer_labels))
    return features, labels

features, labels=deer_nondeer(deer_images,non_deer_images)

def SVM_model(features,labels):
    # Split the dataset into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2)

    # Build an SVM classifier to classify the images into deer and non deer images
    classifier = svm.SVC(kernel='linear')

    # Train the classifier by passing the training data and their labels
    classifier.fit(X_train, y_train)

    # Predict the labels for the test set and store it in the variable
    y_pred = classifier.predict(X_test)

    # Calculate the accuracy of the classifier by considering the y test and y prediction
    accuracy = accuracy_score(y_test, y_pred)

    # We can use the accuracy as performance metric because dataset is balanced
    print('Accuracy:', accuracy)
    return classifier
classifier =SVM_model(features,labels)

import matplotlib.pyplot as plt
def Load_testImage(classifier):
# Load test images
    test_images = []
    for file in os.listdir(r'/content/drive/MyDrive/Asssignment-3/data/deer-test'):
        if file.endswith('.jpg'):
            img = cv2.imread(os.path.join(r'/content/drive/MyDrive/Asssignment-3/data/deer-test', file))
            
            # change to gray color
            img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            # resize the image, this is necessory step because the training images are of different size than testing image
            img = cv2.resize(img, (250, 250))
            # Display each test 
            cv2_imshow(img)
            # Converting the image to numpy array so that we can use numpy functions for further calculations
            test_images = np.array(img)
            test_images = test_images.reshape(test_images.shape[0], -1)

            # Creating the empty list that may be helpful in future if we want to store hog features of all test images
            test_features = []
            # Compute HOG features for test images
            fd = hog(img,orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), visualize=False, multichannel=False)
            test_features.append(fd)

            # Predict the labels for the test set
            y_pred = classifier.predict(test_features)
        
            # Show test images and predicted labels
            if y_pred[0] == 1:
                print('It is Deer')
            else:
                print('It is Not deer')
#Calling the function to show the test images and their predicion abou deer or not a deer
Load_testImage(classifier)

"""# Drawing the bounding boxes without using Non maximum supression"""

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/1.jpg")
test_image=cv2.resize(test_image,(250,250))
test_image=cv2.cvtColor(test_image,cv2.COLOR_BGR2GRAY)

# Define sliding window parameters
win_size = (100, 100)
step_size = 40

# Loop over image patches
for y in range(0, test_image.shape[0]-win_size[1], step_size):
    for x in range(0, test_image.shape[1]-win_size[0], step_size):
        # Extract image patch
        patch = test_image[y:y+win_size[1], x:x+win_size[0]]
        patch=cv2.resize(patch,(250,250))
        # Compute HOG features
        hog_features = hog(patch, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2))

        # Classify patch as deer or non-deer
        if classifier.predict([hog_features])[0] == 1:
            # Draw bounding box around deer
            cv2.rectangle(test_image, (x, y), (x+win_size[0], y+win_size[1]), (0, 255, 0), 2)

# Show result
cv2_imshow(test_image)
print(test_image.shape)

"""# Adding Non-maximum supreession"""

import numpy as np
import cv2
from skimage.feature import hog

# List to store detected bounding boxes
boxes = []
def detect_deer(win_size,step_size,test_image_gray):
    # Loop over image patches
    #Eun the for loop in both X and Y direction as it is a 2D image to find the deer
    for y in range(0, test_image_gray.shape[0]-win_size[1], step_size):
        for x in range(0, test_image_gray.shape[1]-win_size[0], step_size):
            # Extract image patch
            patch = test_image_gray[y:y+win_size[1], x:x+win_size[0]]
            #Resize the patch with size equal to the image size
            patch=cv2.resize(patch,(250,250))
            # Compute HOG features for the patch
            hog_features = hog(patch, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2))
            # Classify patch as deer or non-deer
            score=classifier.predict([hog_features])
            if classifier.predict([hog_features])[0] == 1:
                # Save bounding box coordinates and score
                boxes.append([x, y, x+win_size[0], y+win_size[1], score])
    return boxes


def non_max_suppression_fast(boxes, overlapThresh):
    # If there are no boxes, return an empty list
    if len(boxes) == 0:
        return []

    # Convert the bounding boxes to NumPy array for calculation
    boxes = np.array(boxes)

    # create the list of picked indexes
    pick = []

    # Sort the bounding boxes by their scores in descending order
    scores = boxes[:, 4]
    idxs = np.argsort(scores)[::-1]

    # Loop over the indexes of the bounding boxes
    while len(idxs) > 0:
        # Grab the index with the highest score and add it to the list of picked indexes
        i = idxs[0]
        pick.append(i)

        # Find the overlapping boxes so that we can eliminate them based on the threshold
        xx1 = np.maximum(boxes[i, 0], boxes[idxs[1:], 0])
        yy1 = np.maximum(boxes[i, 1], boxes[idxs[1:], 1])
        xx2 = np.minimum(boxes[i, 2], boxes[idxs[1:], 2])
        yy2 = np.minimum(boxes[i, 3], boxes[idxs[1:], 3])

        # Compute the width and height of the overlapping boxes
        w = np.maximum(0, xx2 - xx1 + 1)
        h = np.maximum(0, yy2 - yy1 + 1)

        # Compute the overlap ratio between the overlapping boxes and the selected box
        overlap = (w * h) / ((boxes[i, 2] - boxes[i, 0] + 1) * (boxes[i, 3] - boxes[i, 1] + 1))

        # Remove the overlapping boxes from the indexes list
        idxs = idxs[1:][overlap <= overlapThresh]

    # Return only the bounding boxes that were picked
    return boxes[pick].tolist()


# Load test image 
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/1.jpg")
test_image = cv2.resize(test_image, (250, 250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Define sliding window parameters

######----------This is very important step------------########
#####--------Select the values of bounding box by trial and error method-------####

#If we run the model again then the images in the training and testing step will be different
#Then the accuracy will be different
#Thats why everytime we need to set the window size and step size to get the prfect bounding box aroud the deer
win_size = (150, 150)
step_size = 25

#calling deer detect function
boxes=detect_deer(win_size,step_size,test_image_gray)

# Apply non-maximum suppression
boxes = non_max_suppression_fast(boxes, overlapThresh=0.1)

def Show_image(boxes,test_image):
    # Loop over the remaining boxes and draw them on the image
    for box in boxes:
        x1, y1, x2, y2 = map(int, box[:4])
        cv2.rectangle(test_image, (x1, y1), (x2, y2), (0, 255, 0), 2)

    # Show result
    cv2_imshow(test_image)


#calling show image function
Show_image(boxes,test_image)

# Load test image that is not a deer
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/2.jpg")
test_image = cv2.resize(test_image, (250, 250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Define sliding window parameters
#Change it to get good results
win_size = (200, 200)
step_size = 20

boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.01)
Show_image(boxes,test_image)

"""# Now modifying the dataset by adding more deer images and non deer images by manually croping given images"""

# Load deer and non-deer images
deer_images = []
non_deer_images = []

for file in os.listdir(r'/content/drive/MyDrive/Asssignment-3/data/deer-train_new/deer_images'):
    if file.endswith('.jpg'):
        img=cv2.imread(os.path.join(r'/content/drive/MyDrive/Asssignment-3/data/deer-train_new/deer_images', file), 0)
        img=cv2.resize(img,(250,250))
        deer_images.append(img)
        
for file in os.listdir(r'/content/drive/MyDrive/Asssignment-3/data/deer-train_new/non-deer-images'):
    if file.endswith('.jpg'):
        img2=cv2.imread(os.path.join(r'/content/drive/MyDrive/Asssignment-3/data/deer-train_new/non-deer-images', file), 0)
        img2=cv2.resize(img2,(250,250))
        non_deer_images.append(img2)

print(f"Numeber of deer images in the dataset {len(deer_images)}")
print(f"Numeber of non deer images in the dataset {len(non_deer_images)}")

#Calling th efunction and calculating the features and labels
features, labels=deer_nondeer(deer_images,non_deer_images)

#Call SVM function to fit the model on new dataset
classifier =SVM_model(features,labels)

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/1.jpg")
test_image=cv2.resize(test_image,(250,250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)


# Define sliding window parameters
win_size = (200, 200)
step_size = 15
boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.05)
Show_image(boxes,test_image)

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/2.jpg")
test_image=cv2.resize(test_image,(250,250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Define sliding window parameters
win_size = (200, 200)
step_size = 20
boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.05)
Show_image(boxes,test_image)

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/3.png")
test_image=cv2.resize(test_image,(250,250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)


# Define sliding window parameters
win_size = (150, 150)
step_size = 20
boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.4)
Show_image(boxes,test_image)

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/4.JPG")
test_image=cv2.resize(test_image,(250,250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)


# Define sliding window parameters
win_size = (100, 100)
step_size = 40
boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.05)
Show_image(boxes,test_image)

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/5.jpg")
test_image=cv2.resize(test_image,(250,250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Define sliding window parameters
win_size = (150, 150)
step_size = 20

boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.05)
Show_image(boxes,test_image)

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/6.jpg")
test_image=cv2.resize(test_image,(250,250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Define sliding window parameters
win_size = (150, 150)
step_size = 30

boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.01)
Show_image(boxes,test_image)

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/7.JPG")
test_image=cv2.resize(test_image,(250,250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Define sliding window parameters
win_size = (100, 100)
step_size = 20

boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.05)
Show_image(boxes,test_image)

# Load test that contains deer image
test_image = cv2.imread("/content/drive/MyDrive/Asssignment-3/data/deer-test/8.jpg")
test_image=cv2.resize(test_image,(250,250))
test_image_gray = cv2.cvtColor(test_image, cv2.COLOR_BGR2GRAY)

# Define sliding window parameters
win_size = (170, 70)
step_size = 20

boxes=detect_deer(win_size,step_size,test_image_gray)
boxes = non_max_suppression_fast(boxes, overlapThresh=0.1)
Show_image(boxes,test_image)